name: CI

on:
  [push]

jobs:
  build:
    name: build os=${{ matrix.os }} target=${{ matrix.target }} int=${{ matrix.interpreter || 'all' }} ml=${{ matrix.manylinux || 'auto' }}
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        include:
          # windows
          - os: windows
            target: x86_64
          - os: windows
            target: aarch64
            interpreter: 3.11 3.12

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
    - uses: actions/checkout@v4

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: ${{ matrix.python-architecture || 'x64' }}

    - run: pip install -U twine

    - name: build sdist
      if: ${{ matrix.os == 'linux' && matrix.target == 'x86_64' }}
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist

    - name: build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: ${{ matrix.manylinux || 'auto' }}
        args: --release --out dist --interpreter ${{ matrix.interpreter || '3.8 3.9 3.10 3.11 3.12' }}
        rust-toolchain: stable
        docker-options: -e CI

    - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

    - run: twine check --strict dist/*

    - uses: actions/upload-artifact@v3
      with:
        name: pypi_files
        path: dist

  release:
    needs: [build]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    environment: release

    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v3
        with:
          name: pypi_files
          path: dist

      - run: ls -lh dist

      - uses: pypa/gh-action-pypi-publish@release/v1
